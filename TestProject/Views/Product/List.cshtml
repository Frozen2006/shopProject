@using BLL
@model TestProject.Models.ProductListModel

@*Styles for product list*@
<style>
    .no_underline:hover {
        text-decoration: none;
    }
    .products {
        margin: 0 auto;
    }
    .info {
        width: 68%;
        display: inline-block;
    }
    .tocart {
        display: inline-block;
        width: 30%;   
        text-align: right;
    }
    #sort_panel .btn {
        vertical-align:top;
        margin: 0 5px;
    }   
</style>

@*Styles for slider*@
<style>
    .counter_box {
        text-align: left;
    }
    .price {
        display: block;
    }
    .slider {
        display: inline-block;
        width: 200px;
    }
    .counter {
        width: 50px;
    }
    .add_button {
        display: inline-block;
    }
    .controls_wrapper {
        display: inline-block;
        width: 85%;
    }
    .price {
        font-weight: bold;
    }
    .price_value {
        font-weight: normal;
    }
</style>

@Html.Action("CategoryNavigation", "Category", new { category = Model.Category })

@if (Model.Products.Count() != 0)
{  
<div class="products"> 
    <h3>Products</h3>

    <div id="sort_panel">
        <select id="sort" onchange="jsFunction()">
            <option>Alphabetic ascending</option>      
            <option>Alphabetic descending</option> 
            <option>Price ascending</option>                 
            <option>Price descending</option>            
        </select>

        <script>
            function jsFunction() {

                var params = {
                    categoryId: "@Model.Category.Id",
                    sort: "@Model.SortType",
                    pageSize: "@Model.PageSize",
                    reverse: "@Model.Reverse"
                }

                var select = document.getElementById("sort");

                switch (select.selectedIndex) {
                    case 0:
                        params.sort = "Alphabetic";
                        params.reverse = "False";
                        break;
                    case 1:
                        params.sort = "Alphabetic";
                        params.reverse = "True";
                        break;
                    case 2:
                        params.sort = "Price";
                        params.reverse = "False";
                        break;
                    case 3:
                        params.sort = "Price";
                        params.reverse = "True";
                        break;
                }
       
                window.location.href = "/product/list?" + $.param(params);  
            }
        </script>

        @for (int i = 1; i < 4; i++)
        {
            int size = (int)Math.Pow(10, i);
                @Html.ActionLink("Show by " + size, "List", new { categoryId = Model.Category.Id, sort = Model.SortType, pageSize = size, reverse = Model.Reverse }, new { @class = "btn" })
        }
    </div>      


@foreach(var product in Model.Products)
{
    <div class="well product_box">
        @{
            string href = "/product/details/" + product.Id;
            string path = "/Image/ProductImg/" + product.Id;
            
            <div class="info">
                <a class="no_underline" href="@href">
                    <img class="product_photo" width="70" height="70" src="@path" />
                </a>
                <a href="@href">
                    @product.Name
                </a>
            </div>
                
            <div class="tocart">
                @Html.Partial("../Counter", product)  
            </div>
        }     
    </div>
}

@{
    int pageSize = Model.PageSize;
    int productCount = Model.Category.Products.Count();
    const int maxPageCount = 15;

    int pageCount = productCount / pageSize + 1;
}

    <div class="pagination pagination-centered">
        <ul>
        @if (pageCount >= maxPageCount)
        {
            const int linkCount = 6;

            for (int i = 1; i <= linkCount; i++)
            {
                <li>
                    @Html.ActionLink(i.ToString(), "List", new { categoryId = Model.Category.Id, page = i, sort = Model.SortType, pageSize = Model.PageSize, reverse = Model.Reverse })
                </li>
            }      

            <li class="disabled">...</li>

                    
            for (int i = pageCount - linkCount; i <= pageCount; i++)
            {
                <li>
                    @Html.ActionLink(i.ToString(), "List", new { categoryId = Model.Category.Id, page = i, sort = Model.SortType, pageSize = Model.PageSize, reverse = Model.Reverse })
                </li>
            }
        }

        @if (pageCount > 1 && pageCount < maxPageCount)
        {
            //View all page anchors

            for (int i = 1; i <= pageCount; i++)
            {
                <li>
                    @Html.ActionLink(i.ToString(), "List", new { categoryId = Model.Category.Id, page = i, sort = Model.SortType, pageSize = Model.PageSize, reverse = Model.Reverse })
                </li>
            }
        }
        </ul>
    </div>
</div>
}

<div id="alert-area" style="position: fixed; top: 200px; left: 50%; width: 500px;"></div>

<script>

    $(".float_slider").slider({
        range: "min",
        min: 0,
        max: 10,
        value: 0,
        step: 0.1,
        slide: function (event, ui) {
            var counter = getCounter(event.target);
            counter.value = ui.value;

            $(counter).change();
        }
    });

    $(".int_slider").slider({
        range: "min",
        min: 0,
        max: 10,
        value: 0,
        step: 1 ,
        slide: function (event, ui) {
            var counter = getCounter(event.target);
            counter.value = ui.value;

            $(counter).change();
        }
    });

    function countInput(event, price, sliderClass)
    {
        slider = getSlider(event.target);           

        var stringCount = event.target.value;

        //Parsing input value. 
        var count;
        if (sliderClass == "int_slider") {
            count = parseInt(stringCount) || 0;
        }
        else {
            count = parseFloat(stringCount.replace(",", ".")) || 0;
        }

        //If can't parse than set it to 0.
        //event.target.value = count;
        
        
        $(slider).slider("value", count);

        //Set estimated price.
        var pricespan = getPrice(event.target);
        pricespan.innerHTML = (count * price).toFixed(2);
    }

    function correctInput(event, sliderClass) {
        var stringCount = event.target.value;

        //Trying to parse input
        var count;
        if (sliderClass == "int_slider") {
            count = parseInt(stringCount) || 0;
        }
        else {
            count = parseFloat(stringCount.replace(",", ".")).toFixed(1) || 0;
        }

        //If can't parse than set it to 0.
        event.target.value = count;
    }

    function newAlert(type, message) {
        $("#alert-area").append($("<div class='alert-message " + type + " fade in' data-alert><p> " + message + " </p></div>"));
        $(".alert-message").delay(2000).fadeOut("slow", function () { $(this).remove(); });
    }
    //Returns counter element by its sibling node (e.g. button event sender)
    function getCounter(element) {
        return element.parentNode.getElementsByClassName("counter")[0];
    }

    //Returns input hidden element with product id by its sibling node (e.g. button event sender)
    function getIdInput(element) {
        return element.parentNode.getElementsByClassName("product_id")[0];
    }

    //Returns slider by its sibling node (e.g. button event sender)
    function getSlider(element) {
        return element.parentNode.getElementsByClassName("slider")[0];
    }

    //Returns price span by its sibling node (e.g. button event sender)
    function getPrice(element) {
        return element.parentNode.getElementsByClassName("estimated_price_value")[0];
    }

    //Increases counter value
    function increase(event) {
        var counter = getCounter(event.target);
        var count = parseInt(counter.value);
        count += 1;

        counter.value = count;
    }

    //Decreases counter value
    function decrease(event) {
        var counter = getCounter(event.target);
        var count = parseInt(counter.value);

        if (count >= 1) {
            count -= 1;
            counter.value = count;
        }
    }

    //public ActionResult AddToCart(int productId, int count)
    function sendRequest(id, c) {
        $.ajax
        ({
            url: "/Product/AddToCart",
            data: { productId: id, count: c },
            type: "POST",
            success: function (data) {
                newAlert('alert', data);
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                newAlert('alert alert-error', errorThrown);
            }
        })
    }

    function addToCart(event) {
        var input = getIdInput(event.target);
        var id = parseInt(input.value);

        var counter = getCounter(event.target);
        var count = parseInt(counter.value);

        if (count > 0) {
            sendRequest(id, count);
        }
    }
</script>